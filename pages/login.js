import { useState } from "react";
import Router from "next/router";
import { Container, Spinner } from "react-bootstrap";
import { useRouter } from "next/router";
import Link from "next/link";
import auth from "../lib/auth";
import AppContext from "../context/AppContext";
import { useContext } from "react";
import FormUtil from "../components/common/form";
import MyNavbar from "../components/myNavbar";
import Joi from "joi-browser";
import styles from "../styles/login.module.css";

function Login(props) {
  const [data, setData] = useState({ username: "user1", password: "user123" });
  const [error, setError] = useState("");
  const [spinner, setSpinner] = useState(null);

  const [errors, setErrors] = useState({});
  const { user, setUser } = useContext(AppContext);

  const router = useRouter();
  const redirect = router.query.redirect;

  // I AM NOT CURRENTLY USING THIS NEXT LINE! USING TOAST MESSAGE GENERATED BY httpService
  // Use this logic if we want to display error messages under the input
  const [serverError, setServerError] = useState(null);

  const schema = {
    username: Joi.string().required().label("Username"),
    password: Joi.string().required().label("Password"),
  };

  async function doSubmit(e) {
    // e.preventDefault();
    try {
      setSpinner(true);
      // Login and server will set cookie with name "auth"
      const response = await auth.login(data.username, data.password);
      const user = response.data.user;
      setUser(user);
      const url = redirect ? `/${redirect}` : "/";
      Router.push(url);
    } catch (e) {
      setSpinner(false);
      setError("Login Failed");
      console.error("Login failed");
    }
  }

  const formUtil = new FormUtil(
    data,
    schema,
    errors,
    serverError,
    doSubmit,
    setData,
    setErrors,
    setServerError
  );

  return (
    <>
      <MyNavbar activeLink="login"></MyNavbar>
      <Container>
        <div className="small-center-form">
          <h3 className="mt-3">Login</h3>
          <form onSubmit={formUtil.handleSubmit}>
            {formUtil.renderInput(
              "username",
              "User Name or Email",
              "text",
              null,
              null,
              false
            )}
            {formUtil.renderInput(
              "password",
              "Password",
              "password",
              null,
              null,
              false
            )}
            {formUtil.renderButton("Submit", spinner)}

            <div>
              <Link href="/forgotpw">
                <a>Forgot Password&nbsp;</a>
              </Link>
            </div>
            {error && <p style={{ color: "red" }}>Login Failed!</p>}
          </form>
        </div>
      </Container>
    </>
  );
}

export default Login;
